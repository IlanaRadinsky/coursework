
Procedural/Structural: C and Pascal
- Object-oriented: Java
C++ and Python support oop, but it is not required
- decompose a solution to a problem into a sequence of steps (STATE)

Functional: Haskell and OCaml and Clojure
- decompose a solution to a problem into a series of functions (NO STATE)


Features of FP:
1. "pure" FP eschew side-effects
NO NOTION OF STATE
NO NOTION OF STATEMENTS (e.g., assignment)
instead: functions applied to arguments evaluate to values

2. *recursion* is the primary control structure

3. functions are first-class objects
   functions are data
functions can (and ARE) passed around as arguments to other functions
=> HIGHER-ORDER FUNCTIONS


1.
def fahr(c):
    return float(9) / float(5) * c + 32

def celsius(f):
    return float(5) / float(9) * (f - 32)

fahr(0)
=> 32

celsius(fahr(32))
=> 32


2. 
inductive definition:

a natural number is 0 or the successor of another natural number;
nothing else is a natural number
examples: 0, succ(0) ~ 1, succ(succ(0)) ~ succ(1) ~ 2, ...

fact(0) = 1
fact(n) = n * fact(n-1), if n > 0

ex: fact(2) = 2 * fact(1)
            = 2 * 1 * fact(0)
            = 2 * 1 * 1
            = 2

def fact(n):
    if n == 0:
       return 1
    else:
       return n * fact(n - 1)

def factorial(n):
    assert (n > 0)
    fact(n)

def short(n):
    return (1 if n == 1 else n * short(n - 1))

def iter(n):
    ctr = 1
    ans = 1
    while (ctr <= n)
    	  ans = ctr * ans
	  ctr += 1
    return ans

a list is empty or a pair consisting of an datum (e.g., a natural number) and another list;
nothing else is a list
examples: [], (1, []) ~ [1], (2, (1, [])) ~ (2, [1]) ~ [2, 1]

[]
1 :: []
2 :: (1 :: [])

empty
(cons 1 empty)
(cons 2 (cons 1 empty))

len([]) = 0
len(x :: xs) = 1 + len(xs)

ex: len([2, 1]) = 1 + len([1])
                = 1 + 1 + len([])
                = 1 + 1 + 0
                = 1

def my_len(l):
    if l == []:
       return 0
    else:
       return 1 + my_len(l[1:])

a binary tree is empty or a triple consisting of an datum, a left binary tree, and a right binary tree;
nothing else is a binary tree
examples: None, (1, None, None), (3, None, None),
          Node(2, (1, None, None), (3, None, None))

depth(None) = 0
depth(Node(x, l, r)) = 1 + max(depth(l), depth(r))

from collections import namedtuple
Node = namedtuple('Node', 'data, left, right')

left = Node(1, None, None) 
right = Node(3, None, None) 

tree = Node(2, left, right)
     = Node(2,
            Node(1, None, None) 
            Node(3, None, None))

def depth(t):
    if t == None:
       return 0
    else:
       return 1 + max(depth(t.left), depth(t.right))


3.
HIGHER-ORDER FUNCTIONS
map, filter, fold/reduce

map(f, []) = []
map(f, x :: xs) = (f x) :: (map f xs)

map(celsius, [77, 32]) = (celsius 77) :: (map f [32])
                       = 25 :: (map f [32])
                       = 25 :: ((celsius 32) :: (map f []))
                       = 25 :: (0 :: (map f []))
                       = 25 :: (0 :: [])
                       = [25, 0]

map(fahr map(celsius, [77, 32]))
=> [77.0, 32.0]

map(len, ['Amy', 'B?', 'Carmen', 'Daddy', 'Ella'])
=> [3, 2, 6, 5, 4]


DIGRESSION: anonymous functions / lambda

celsius = lambda f: float(5) / float(9) * (f - 32)
fahr = lambda c: float(9) / float(5) * c + 32

even = lambda x: x % 2 == 0
odd = lambda x: x % 2 == 1

even(0)
=> true

odd(0)
=> false

non_zero = lambda x: (x > 0) or (x < 0)


filter(p, []) = []
filter(p, x :: xs) = if (p x) 
                        x :: filter(p, xs)
                     else filter(p, xs)

filter(odd, [1, 2]) = 1 :: (filter p [2])
                    = 1 :: (filter p [])
                    = 1 :: []
                    = [1]

non_zero = lambda x: x != 0
filter(non_zero, [0, 1, 1, 1, 0])


add2 = lambda x, y: x + y
add3 = lambda x, y, z: x + y + z

map(add2, [1,2,3], [2,3,4])
=> [3,5,7]

map(add2, [1,2,3], [2,3,4], [3,4,5])
=> [6,9,12]


EXERCISE:
five = range(1, 6)
=> [1, 2, 3, 4, 5]

square = lambda x: x ** 2
five_squares = map(square, five)
=> [1, 4, 9, 16, 25]

filter(odd, five_squares)
=> [1, 9]


DIGRESSION: list comprehensions

[expression FOR loop-variable IN sequence]
/* works on all data types that support iterators:
lists, dictionaries, sets, files

five = range(1, 6)
[i ** 2 for i in five]
=> [1, 4, 9, 16, 25]

[i ** 2 for i in five if odd(i)]
=> [1, 9]

names = ['Amy', 'B?', 'Carmen', 'Daddy', 'Ella']
[len(name) for name in names]
=> [3, 2, 6, 5, 4]


fold/reduce

reduceR(f2, [], b) = b
reduceR(f2, x :: xs, b) = f2(x, reduceR(f2, xs, b))

reduceL(f2, b, []) = b
reduceL(f2, b, x :: xs) = reduceL(f2, f2(x, b), xs)

import operator
operator.lt,gt,eq,ne
operator.mul
operator.add
operator.mod
operator.pow
operator.concat

reduce(operator.add, range(11), 0)
=> 55

reduce(operator.mul, range(11), 0)
=> 0

reduce(operator.mul, range(11), 1)
=> 0

reduce(operator.mul, range(1,11), 1)
=> 3628800


QUICKSORT

quicksort([]) = []
quicksort(x :: xs) = quicksort(filter((lambda y: y < x), xs)) + x +
                     quicksort(filter((lambda y: y > x), xs))

def quicksort(l):
    if l == []:
       return []
    else:
       return (quicksort([y for y in l[1:] if y < l[0]]) + [l[0]] +
               quicksort([y for y in l[1:] if y > l[0]]))

Quicksort is an O(n^2) algorithm in the worst case, but on average it
is only O(n log n).  This is because on average it recurs only O(log n)
times, and each time it recurs, it does O(n) work.

What "on average" means here is that filtering around the pivot splits
the list roughly in half each time.

EXERCISE:
Using a recursive approach similar to quicksort, write quickselect,
which selects the kth smallest element of a list in time O(n) on
average.  In other words, DO NOT first sort the list.

